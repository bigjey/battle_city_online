{"version":3,"sources":["constants.ts","preload.ts","gameplay/Body.ts","gameplay/Block.ts","utils.ts","gameplay/GameManager.ts","keyboard.ts","gameplay/Bullet.ts","gameplay/Tank.ts","level-editor.ts","main.ts"],"names":[],"mappings":"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","file":"main.1dd156a5.js","sourceRoot":"..\\src\\client","sourcesContent":["export enum GLOBAL_MODE {\n  NORMAL_GAME,\n  DEBUG_TEST_LEVEL,\n  EDIT_TEST_LEVEL,\n}\n\nexport const MOVE_STEP = 2;\n\nexport const CANVAS_WIDTH = 416;\nexport const CANVAS_HEIGHT = 416;\n\nexport const BLOCK_SIZE = 8;\nexport const CLUSTER_SIZE = 2;\n\nexport const BULLET_SIZE = 8;\nexport const BULLET_SPEED = 4;\n\nexport const TANK_WIDTH = 32;\nexport const TANK_HEIGHT = 32;\n\nexport const SHOOT_COLDOWN = 200;\n\nexport enum DIR {\n  NONE = -1,\n  UP = 0,\n  RIGHT = 1,\n  DOWN = 2,\n  LEFT = 3,\n}\n\nexport enum BlockType {\n  Brick,\n  Steel,\n  Tree,\n  Water,\n}\n\nexport const KEYS = {\n  LEFT: \"ArrowLeft\",\n  RIGHT: \"ArrowRight\",\n  UP: \"ArrowUp\",\n  DOWN: \"ArrowDown\",\n  SHOOT: \"Space\",\n};\n","import PlayerImage from \"../assets/player_1.png\"; \nimport Brick_1Image from \"../assets/brick_1.png\";\nimport Brick_2Image from \"../assets/brick_2.png\";\nimport Brick_3Image from \"../assets/brick_3.png\";\nimport Brick_4Image from \"../assets/brick_4.png\";\nimport Stone_1Image from \"../assets/stone_1.png\";\nimport Stone_2Image from \"../assets/stone_2.png\";\nimport Stone_3Image from \"../assets/stone_3.png\";\nimport Stone_4Image from \"../assets/stone_4.png\";\nimport Tree_1Image from \"../assets/tree_1.png\";\nimport Tree_2Image from \"../assets/tree_2.png\";\nimport Tree_3Image from \"../assets/tree_3.png\";\nimport Tree_4Image from \"../assets/tree_4.png\";\n// import BaseImage from \"../assets/base.png\";\nimport Water_1Image from \"../assets/water_1.png\";\nimport Water_2Image from \"../assets/water_2.png\";\nimport Water_3Image from \"../assets/water_3.png\";\nimport Water_4Image from \"../assets/water_4.png\";\n\n\n\ninterface Sprites {\n  [key: string]: {\n    file: string;\n    img?: HTMLImageElement;\n  };\n}\n\nexport const SPRITES: Sprites = {\n  player_1: {\n    file: PlayerImage,\n  },\n  brick_1: {\n    file: Brick_1Image,\n  },\n  brick_2: {\n    file: Brick_2Image,\n  },\n  brick_3: {\n    file: Brick_3Image,\n  },\n  brick_4: {\n    file: Brick_4Image,\n  },\n  stone_1: {\n    file: Stone_1Image,\n  },\n  stone_2: {\n    file: Stone_2Image,\n  },\n  stone_3: {\n    file: Stone_3Image,\n  },\n  stone_4: {\n    file: Stone_4Image,\n  },\n  tree_1: {\n    file: Tree_1Image,\n  },\n  tree_2: {\n    file: Tree_2Image,\n  },\n  tree_3: {\n    file: Tree_3Image,\n  },\n  tree_4: {\n    file: Tree_4Image,\n  },\n  water_1: {\n    file: Water_1Image,\n  },\n  water_2: {\n    file: Water_2Image,\n  },\n  water_3: {\n    file: Water_3Image,\n  },\n  water_4: {\n    file: Water_4Image,\n  },\n};\n\nexport function preloadAssets(): Promise<void[]> {\n  const promises = Object.keys(SPRITES).map(\n    (key) =>\n      new Promise<void>((res) => {\n        const img = new Image();\n        img.onload = function () {\n          SPRITES[key].img = img;\n          res();\n        };\n        img.src = SPRITES[key].file;\n      })\n  );\n  return Promise.all(promises);\n}\n","import { XY } from \"..\";\n\nexport class Body {\n  pos: XY = {\n    x: 0,\n    y: 0,\n  };\n  size: XY = {\n    x: 0,\n    y: 0,\n  };\n  constructor(x = 0, y = 0, w = 0, h = 0) {\n    this.pos.x = x;\n    this.pos.y = y;\n    this.size.x = w;\n    this.size.y = h;\n  }\n  get t(): number {\n    return this.pos.y;\n  }\n  get l(): number {\n    return this.pos.x;\n  }\n  get b(): number {\n    return this.pos.y + this.size.y;\n  }\n  get r(): number {\n    return this.pos.x + this.size.x;\n  }\n  get center(): XY {\n    return {\n      x: this.pos.x + this.size.x / 2,\n      y: this.pos.y + this.size.y / 2,\n    };\n  }\n}\n","import { BlockType, BLOCK_SIZE } from \"../constants\";\nimport { renderBlock } from \"../utils\";\nimport { Body } from \"./Body\";\n\nexport class Block extends Body {\n  x: number;\n  y: number;\n  type: BlockType;\n  constructor(blockX: number, blockY: number, type: BlockType) {\n    super(blockX * BLOCK_SIZE, blockY * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n\n    this.x = blockX;\n    this.y = blockY;\n    this.type = type;\n  }\n  render(): void {\n    renderBlock(this.type, this.x, this.y);\n  }\n  get isWalkable(): boolean {\n    switch (this.type) {\n      case BlockType.Tree:\n        return true;\n      default:\n        return false;\n    }\n  }\n  get isDamagable(): boolean {\n    switch (this.type) {\n      case BlockType.Brick:\n        return true;\n      default:\n        return false;\n    }\n  }\n  get isSolid(): boolean {\n    switch (this.type) {\n      case BlockType.Brick:\n      case BlockType.Steel:\n        return true;\n      default:\n        return false;\n    }\n  }\n}\n","import {\n  BlockType,\n  BLOCK_SIZE,\n  CANVAS_HEIGHT,\n  CANVAS_WIDTH,\n  CLUSTER_SIZE,\n} from \"./constants\";\nimport { Block } from \"./gameplay/Block\";\nimport { Body } from \"./gameplay/Body\";\nimport { gameManager } from \"./gameplay/GameManager\";\nimport { SPRITES } from \"./preload\";\n\nconst MOVEMENT_SNAP_VALUE = BLOCK_SIZE * 2;\n\nexport function AABBIntersects(A: Body, B: Body): boolean {\n  return !(A.l >= B.r || B.l >= A.r || A.t >= B.b || B.t >= A.b);\n}\n\nexport function snapValue(value: number): number {\n  const snapped = Math.round(value / MOVEMENT_SNAP_VALUE);\n  return snapped * MOVEMENT_SNAP_VALUE;\n}\n\nexport function blockIndexInBounds(x: number, y: number): boolean {\n  return x >= 0 && x < 52 && y >= 0 && y < 52;\n}\n\nexport function bodyInBounds(body: Body): boolean {\n  return (\n    body.l >= 0 &&\n    body.t >= 0 &&\n    body.b <= CANVAS_HEIGHT &&\n    body.r <= CANVAS_WIDTH\n  );\n}\n\nexport function bodyIsVisible(body: Body): boolean {\n  return (\n    body.l < CANVAS_WIDTH && body.r > 0 && body.t < CANVAS_HEIGHT && body.b > 0\n  );\n}\n\nexport function renderBlock(\n  type: BlockType,\n  blockX: number,\n  blockY: number\n): void {\n  const spriteIndex = (blockY % 2) * 2 + (blockX % 2);\n\n  switch (type) {\n    case BlockType.Brick:\n      gameManager.ctx.drawImage(\n        SPRITES[`brick_${spriteIndex + 1}`].img as CanvasImageSource,\n        blockX * BLOCK_SIZE,\n        blockY * BLOCK_SIZE\n      );\n      break;\n    case BlockType.Steel:\n      gameManager.ctx.drawImage(\n        SPRITES[`stone_${spriteIndex + 1}`].img as CanvasImageSource,\n        blockX * BLOCK_SIZE,\n        blockY * BLOCK_SIZE\n      );\n      break;\n    case BlockType.Tree:\n      gameManager.ctx.drawImage(\n        SPRITES[`tree_${spriteIndex + 1}`].img as CanvasImageSource,\n        blockX * BLOCK_SIZE,\n        blockY * BLOCK_SIZE\n      );\n      break;\n    case BlockType.Water:\n      gameManager.ctx.drawImage(\n        SPRITES[`water_${spriteIndex + 1}`].img as CanvasImageSource,\n        blockX * BLOCK_SIZE,\n        blockY * BLOCK_SIZE\n      );\n      break;\n    default:\n      gameManager.ctx.fillStyle = \"pink\";\n      gameManager.ctx.fillRect(\n        blockX * BLOCK_SIZE,\n        blockY * BLOCK_SIZE,\n        BLOCK_SIZE,\n        BLOCK_SIZE\n      );\n  }\n}\n\nexport function renderCluster(\n  type: BlockType,\n  clusterX: number,\n  clusterY: number\n): void {\n  const blockX = clusterX * CLUSTER_SIZE;\n  const blockY = clusterY * CLUSTER_SIZE;\n\n  for (let dy = 0; dy < CLUSTER_SIZE; dy++) {\n    for (let dx = 0; dx < CLUSTER_SIZE; dx++) {\n      renderBlock(type, blockX + dx, blockY + dy);\n    }\n  }\n}\n\nexport function buildCluster(\n  blockType: BlockType,\n  clusterX: number,\n  clusterY: number\n): void {\n  for (let yOffset = 0; yOffset < CLUSTER_SIZE; yOffset++) {\n    for (let xOffset = 0; xOffset < CLUSTER_SIZE; xOffset++) {\n      const blockX = clusterX * CLUSTER_SIZE + xOffset;\n      const blockY = clusterY * CLUSTER_SIZE + yOffset;\n\n      gameManager.blocks[blockY][blockX] = new Block(blockX, blockY, blockType);\n    }\n  }\n}\n\nexport function blocksinCluster(clusterX: number, clusterY: number): Block[] {\n  const items: Block[] = [];\n\n  for (let yOffset = 0; yOffset < CLUSTER_SIZE; yOffset++) {\n    for (let xOffset = 0; xOffset < CLUSTER_SIZE; xOffset++) {\n      const blockX = clusterX * CLUSTER_SIZE + xOffset;\n      const blockY = clusterY * CLUSTER_SIZE + yOffset;\n\n      const block = gameManager.blocks[blockY][blockX];\n\n      if (block) {\n        items.push(block);\n      }\n    }\n  }\n\n  return items;\n}\n","import {\n  BlockType,\n  CANVAS_HEIGHT,\n  CANVAS_WIDTH,\n  CLUSTER_SIZE,\n  GLOBAL_MODE,\n} from \"../constants\";\nimport { buildCluster } from \"../utils\";\nimport { Block } from \"./Block\";\nimport { Bullet } from \"./Bullet\";\nimport { Tank } from \"./Tank\";\n\nconst canvas = document.createElement(\"canvas\");\n\ndocument.body.appendChild(canvas);\n\ncanvas.width = CANVAS_WIDTH;\ncanvas.height = CANVAS_HEIGHT;\n\nexport interface GameManager {\n  mode: GLOBAL_MODE;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  player1: Tank | null;\n  blocks: Array<Array<Block | null>>;\n  bullets: Bullet[];\n  debugLevel: Array<Array<BlockType | null>>;\n}\n\nexport class GameManager implements GameManager {\n  mode = GLOBAL_MODE.EDIT_TEST_LEVEL;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  player1: Tank | null = null;\n  blocks: Array<Array<Block | null>> = [];\n  bullets: Bullet[] = [];\n  debugLevel: Array<Array<BlockType | null>> = [];\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    this.restoreDebugLevelData();\n  }\n\n  setMode(mode: GLOBAL_MODE): void {\n    this.mode = mode;\n\n    switch (this.mode) {\n      case GLOBAL_MODE.DEBUG_TEST_LEVEL:\n        this.buildDebugLevel();\n        this.player1 = new Tank(0, 0);\n        break;\n    }\n  }\n\n  restoreDebugLevelData(): void {\n    const data = localStorage.getItem(\"debugLevel\");\n    if (data) {\n      try {\n        this.debugLevel = JSON.parse(data);\n      } catch (e) {\n        //\n      }\n    }\n\n    if (!this.debugLevel.length) {\n      this.debugLevel = new Array(52 / CLUSTER_SIZE)\n        .fill(null)\n        .map(() => new Array(52 / CLUSTER_SIZE).fill(null));\n    }\n  }\n  buildDebugLevel(): void {\n    for (const [clusterY, row] of this.debugLevel.entries()) {\n      for (const [clusterX, type] of row.entries()) {\n        if (type !== null) {\n          buildCluster(type, clusterX, clusterY);\n        }\n      }\n    }\n  }\n}\n\nconst instance = new GameManager(canvas);\n\nwindow.gameManager = instance;\n\nexport { instance as gameManager };\n","import { GLOBAL_MODE } from \"./constants\";\nimport { gameManager } from \"./gameplay/GameManager\";\n\nexport const keysPressed: { [key: string]: boolean } = {};\n\nwindow.addEventListener(\"keypress\", function (e) {\n  switch (e.key) {\n    case \"1\":\n      gameManager.setMode(GLOBAL_MODE.NORMAL_GAME);\n      break;\n    case \"2\":\n      gameManager.setMode(GLOBAL_MODE.DEBUG_TEST_LEVEL);\n      break;\n    case \"3\":\n      gameManager.setMode(GLOBAL_MODE.EDIT_TEST_LEVEL);\n      break;\n\n    default:\n      break;\n  }\n});\n\nwindow.addEventListener(\"keydown\", function (e) {\n  keysPressed[e.code] = true;\n});\n\nwindow.addEventListener(\"keyup\", function (e) {\n  keysPressed[e.code] = false;\n});\n","import { DIR, BULLET_SIZE, BULLET_SPEED, BLOCK_SIZE } from \"../constants\";\nimport { overlappingBlocks, bodyIsVisible, blockIndexInBounds } from \"../utils\";\n\nimport { Body } from \"./Body\";\nimport { Block } from \"./Block\";\nimport { gameManager } from \"./GameManager\";\nimport { XY } from \"..\";\n\nexport class Bullet extends Body {\n  dir: DIR = DIR.NONE;\n\n  constructor(x: number, y: number, dir: DIR) {\n    super(x, y, BULLET_SIZE, BULLET_SIZE);\n\n    this.dir = dir;\n  }\n\n  update(): void {\n    switch (this.dir) {\n      case DIR.LEFT:\n        this.pos.x -= BULLET_SPEED;\n        break;\n      case DIR.UP:\n        this.pos.y -= BULLET_SPEED;\n        break;\n      case DIR.RIGHT:\n        this.pos.x += BULLET_SPEED;\n        break;\n      case DIR.DOWN:\n        this.pos.y += BULLET_SPEED;\n        break;\n    }\n\n    const b = this.hitBlocks();\n\n    if (b.length) {\n      let hit = false;\n\n      for (const block of b) {\n        if (block.isSolid) {\n          hit = true;\n        }\n        if (block.isDamagable) {\n          gameManager.blocks[block.y][block.x] = null;\n          hit = true;\n        }\n      }\n\n      if (hit) {\n        gameManager.bullets.splice(gameManager.bullets.indexOf(this), 1);\n      }\n    }\n\n    if (!bodyIsVisible(this)) {\n      gameManager.bullets.splice(gameManager.bullets.indexOf(this), 1);\n    }\n  }\n  render(): void {\n    gameManager.ctx.fillStyle = \"#fff\";\n    gameManager.ctx.fillRect(this.pos.x, this.pos.y, BULLET_SIZE, BULLET_SIZE);\n  }\n  hitBlocks(): Array<Block> {\n    const items: Array<Block> = [];\n\n    if (this.dir === DIR.NONE) {\n      return items;\n    }\n\n    let pos1, pos2, pos3, pos4: XY;\n\n    if (this.dir === DIR.LEFT || this.dir === DIR.RIGHT) {\n      pos1 = {\n        x: Math.floor(this.center.x / BLOCK_SIZE),\n        y: Math.floor((this.center.y + BLOCK_SIZE * 0.5) / BLOCK_SIZE),\n      };\n      pos2 = {\n        x: Math.floor(this.center.x / BLOCK_SIZE),\n        y: Math.floor((this.center.y - BLOCK_SIZE * 0.5) / BLOCK_SIZE),\n      };\n      pos3 = {\n        x: Math.floor(this.center.x / BLOCK_SIZE),\n        y: Math.floor((this.center.y + BLOCK_SIZE * 1.5) / BLOCK_SIZE),\n      };\n      pos4 = {\n        x: Math.floor(this.center.x / BLOCK_SIZE),\n        y: Math.floor((this.center.y - BLOCK_SIZE * 1.5) / BLOCK_SIZE),\n      };\n    } else {\n      pos1 = {\n        x: Math.floor((this.center.x + BLOCK_SIZE * 0.5) / BLOCK_SIZE),\n        y: Math.floor(this.center.y / BLOCK_SIZE),\n      };\n      pos2 = {\n        x: Math.floor((this.center.x - BLOCK_SIZE * 0.5) / BLOCK_SIZE),\n        y: Math.floor(this.center.y / BLOCK_SIZE),\n      };\n      pos3 = {\n        x: Math.floor((this.center.x + BLOCK_SIZE * 1.5) / BLOCK_SIZE),\n        y: Math.floor(this.center.y / BLOCK_SIZE),\n      };\n      pos4 = {\n        x: Math.floor((this.center.x - BLOCK_SIZE * 1.5) / BLOCK_SIZE),\n        y: Math.floor(this.center.y / BLOCK_SIZE),\n      };\n    }\n\n    // first side of hit\n    if (\n      blockIndexInBounds(pos1.x, pos1.y) &&\n      gameManager.blocks[pos1.y][pos1.x]\n    ) {\n      items.push(gameManager.blocks[pos1.y][pos1.x] as Block);\n      // second block of first side\n      if (\n        blockIndexInBounds(pos3.x, pos3.y) &&\n        gameManager.blocks[pos3.y][pos3.x]\n      ) {\n        items.push(gameManager.blocks[pos3.y][pos3.x] as Block);\n      }\n    }\n\n    // second side of hit\n    if (\n      blockIndexInBounds(pos2.x, pos2.y) &&\n      gameManager.blocks[pos2.y][pos2.x]\n    ) {\n      items.push(gameManager.blocks[pos2.y][pos2.x] as Block);\n      // second block of second side\n      if (\n        blockIndexInBounds(pos4.x, pos4.y) &&\n        gameManager.blocks[pos4.y][pos4.x]\n      ) {\n        items.push(gameManager.blocks[pos4.y][pos4.x] as Block);\n      }\n    }\n\n    // for (let x = lPos; x < lPos + radius; x++) {\n    //   for (let y = tPos; y < tPos + radius; y++) {\n    //     if (!blockIndexInBounds(x, y)) {\n    //       continue;\n    //     }\n    //     if (gameManager.blocks[y][x]) {\n    //       items.push(gameManager.blocks[y][x] as Block);\n    //     }\n    //   }\n    // }\n\n    return items;\n  }\n}\n","import { XY } from \"..\";\nimport {\n  BLOCK_SIZE,\n  BULLET_SIZE,\n  CLUSTER_SIZE,\n  DIR,\n  KEYS,\n  MOVE_STEP,\n  SHOOT_COLDOWN,\n  TANK_HEIGHT,\n  TANK_WIDTH,\n} from \"../constants\";\nimport { keysPressed } from \"../keyboard\";\nimport { SPRITES } from \"../preload\";\nimport {\n  snapValue,\n  bodyInBounds,\n  AABBIntersects,\n  blocksinCluster,\n} from \"../utils\";\nimport { Block } from \"./Block\";\nimport { Body } from \"./Body\";\nimport { Bullet } from \"./Bullet\";\nimport { gameManager } from \"./GameManager\";\n\nexport class Tank extends Body {\n  dir = DIR.RIGHT;\n  lastShot = 0;\n\n  constructor(x: number, y: number) {\n    super(x, y, TANK_WIDTH, TANK_HEIGHT);\n  }\n\n  update(): void {\n    // movement\n    const newPos: XY = {\n      x: this.pos.x,\n      y: this.pos.y,\n    };\n    let newDir: DIR = DIR.NONE;\n    if (keysPressed[KEYS.LEFT]) {\n      newPos.x -= MOVE_STEP;\n      this.pos.y = newPos.y = snapValue(this.pos.y);\n      newDir = DIR.LEFT;\n    } else if (keysPressed[KEYS.RIGHT]) {\n      newPos.x += MOVE_STEP;\n      this.pos.y = newPos.y = snapValue(this.pos.y);\n      newDir = DIR.RIGHT;\n    } else if (keysPressed[KEYS.UP]) {\n      newPos.y -= MOVE_STEP;\n      this.pos.x = newPos.x = snapValue(this.pos.x);\n      newDir = DIR.UP;\n    } else if (keysPressed[KEYS.DOWN]) {\n      newPos.y += MOVE_STEP;\n      this.pos.x = newPos.x = snapValue(this.pos.x);\n      newDir = DIR.DOWN;\n    }\n    if (newDir !== DIR.NONE) {\n      this.dir = newDir;\n\n      if (this.move(newPos)) {\n        this.pos = newPos;\n      }\n    }\n\n    // shooting\n    if (\n      (!this.lastShot || Date.now() - this.lastShot >= SHOOT_COLDOWN) &&\n      keysPressed[KEYS.SHOOT]\n    ) {\n      this.shoot();\n    }\n  }\n\n  render(): void {\n    const x = this.pos.x + this.size.x / 2;\n    const y = this.pos.y + this.size.y / 2;\n    gameManager.ctx.save();\n    gameManager.ctx.translate(x, y);\n    gameManager.ctx.rotate((Math.PI / 2) * this.dir);\n    gameManager.ctx.translate(-x, -y);\n    gameManager.ctx.drawImage(\n      SPRITES.player_1.img as CanvasImageSource,\n      this.pos.x,\n      this.pos.y\n    );\n    gameManager.ctx.restore();\n  }\n  move(newPos: XY): boolean {\n    const newBody = new Body(newPos.x, newPos.y, TANK_WIDTH, TANK_WIDTH);\n    if (!bodyInBounds(newBody)) {\n      return false;\n    }\n\n    const blocks = this.overlappingBlocks(newBody);\n\n    for (const block of blocks) {\n      if (!block.isWalkable) {\n        console.log(\"cant walk\");\n        return false;\n      }\n    }\n\n    return true;\n  }\n  shoot(): void {\n    gameManager.bullets.push(\n      new Bullet(\n        this.center.x - BULLET_SIZE / 2,\n        this.center.y - BULLET_SIZE / 2,\n        this.dir\n      )\n    );\n    this.lastShot = Date.now();\n  }\n  overlappingBlocks(body: Body): Block[] {\n    const items: Block[] = [];\n    const res = BLOCK_SIZE * CLUSTER_SIZE;\n\n    const lCluster = Math.floor(body.l / res);\n    const rCluster = Math.ceil(body.r / res);\n    const tCluster = Math.floor(body.t / res);\n    const bCluster = Math.ceil(body.b / res);\n\n    for (let clusterY = tCluster; clusterY < bCluster; clusterY++) {\n      for (let clusterX = lCluster; clusterX < rCluster; clusterX++) {\n        for (const block of blocksinCluster(clusterX, clusterY)) {\n          items.push(block);\n        }\n      }\n    }\n\n    console.log(lCluster, rCluster);\n    console.log(tCluster, bCluster);\n\n    return items;\n  }\n}\n","import { XY } from \".\";\nimport {\n  BlockType,\n  BLOCK_SIZE,\n  CANVAS_HEIGHT,\n  CANVAS_WIDTH,\n  CLUSTER_SIZE,\n} from \"./constants\";\nimport { gameManager } from \"./gameplay/GameManager\";\nimport { renderCluster } from \"./utils\";\n\nconst $level_editor = document.querySelectorAll(\"#level-editor\");\nconst $pallete_colors: NodeListOf<HTMLDivElement> = document.querySelectorAll(\n  \".pallete__color\"\n);\nconst classnames: { [key: string]: string } = {\n  activePaletteColor: \"pallete__color--active\",\n};\n\nconst stringToBrush: { [name: string]: BlockType | null } = {\n  empty: null,\n  brick: BlockType.Brick,\n  stone: BlockType.Steel,\n  tree: BlockType.Tree,\n  water: BlockType.Water,\n};\n\nconst RESOLUTION = BLOCK_SIZE * CLUSTER_SIZE;\n\nexport class LevelEditor {\n  brush: BlockType | null = null;\n  hl: XY | null = null;\n  mousePressed = false;\n\n  constructor() {\n    $pallete_colors.forEach(($color) => {\n      $color.addEventListener(\"click\", (e) => {\n        const brushValue = $color.dataset.colorValue;\n        if (brushValue) {\n          const brushType = stringToBrush[brushValue];\n          this.setBrush(brushType);\n\n          $pallete_colors.forEach(($color) => {\n            $color.classList.remove(classnames.activePaletteColor);\n          });\n\n          $color.classList.add(classnames.activePaletteColor);\n        }\n      });\n    });\n\n    gameManager.canvas.addEventListener(\"mousemove\", (e) => {\n      const x = Math.floor(e.offsetX / RESOLUTION);\n      const y = Math.floor(e.offsetY / RESOLUTION);\n\n      if (x >= 0 && x < 52 / CLUSTER_SIZE && y >= 0 && y < 52 / CLUSTER_SIZE) {\n        this.setHL({ x, y });\n        if (this.mousePressed) {\n          this.paintCell({ x, y });\n        }\n      } else {\n        this.setHL(null);\n      }\n    });\n\n    gameManager.canvas.addEventListener(\"mouseleave\", () => {\n      this.setHL(null);\n    });\n\n    gameManager.canvas.addEventListener(\"mousedown\", (e) => {\n      this.mousePressed = true;\n\n      const x = Math.floor(e.offsetX / RESOLUTION);\n      const y = Math.floor(e.offsetY / RESOLUTION);\n\n      if (x >= 0 && x < 52 / CLUSTER_SIZE && y >= 0 && y < 52 / CLUSTER_SIZE) {\n        this.paintCell({ x, y });\n      }\n    });\n    gameManager.canvas.addEventListener(\"mouseup\", () => {\n      this.mousePressed = false;\n    });\n  }\n  render(): void {\n    gameManager.ctx.fillStyle = \"#000\";\n    gameManager.ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    const res = BLOCK_SIZE * CLUSTER_SIZE;\n\n    for (let i = 0; i < Math.floor(CANVAS_WIDTH / res); i++) {\n      gameManager.ctx.strokeStyle = \"#222\";\n      gameManager.ctx.lineWidth = 1;\n      gameManager.ctx.beginPath();\n      gameManager.ctx.moveTo(i * res, 0);\n      gameManager.ctx.lineTo(i * res, CANVAS_HEIGHT);\n      gameManager.ctx.closePath();\n      gameManager.ctx.stroke();\n      gameManager.ctx.beginPath();\n      gameManager.ctx.moveTo(0, i * res);\n      gameManager.ctx.lineTo(CANVAS_WIDTH, i * res);\n      gameManager.ctx.closePath();\n      gameManager.ctx.stroke();\n    }\n\n    for (const [clusterY, row] of gameManager.debugLevel.entries()) {\n      for (const [clusterX, type] of row.entries()) {\n        if (type !== null) {\n          renderCluster(type, clusterX, clusterY);\n        }\n      }\n    }\n\n    if (this.hl) {\n      gameManager.ctx.strokeStyle = \"rgba(255,255,255,1)\";\n      gameManager.ctx.lineWidth = 2;\n      gameManager.ctx.strokeRect(\n        this.hl.x * RESOLUTION,\n        this.hl.y * RESOLUTION,\n        RESOLUTION,\n        RESOLUTION\n      );\n    }\n  }\n  setBrush(brush: BlockType | null): void {\n    this.brush = brush;\n  }\n  setHL(hl: XY | null): void {\n    this.hl = hl;\n  }\n  paintCell(xy: XY): void {\n    gameManager.debugLevel[xy.y][xy.x] = this.brush;\n\n    this.save();\n  }\n  save(): void {\n    localStorage.setItem(\"debugLevel\", JSON.stringify(gameManager.debugLevel));\n  }\n}\n\nconst instance = new LevelEditor();\n\nwindow.levelEditor = instance;\n\nexport { instance as levelEditor };\n","import { CANVAS_HEIGHT, CANVAS_WIDTH, GLOBAL_MODE } from \"./constants\";\nimport { preloadAssets } from \"./preload\";\nimport { Tank } from \"./gameplay/Tank\";\n\nimport { gameManager } from \"./gameplay/GameManager\";\nimport { levelEditor } from \"./level-editor\";\n\nfunction update() {\n  gameManager.player1?.update();\n\n  for (const bullet of gameManager.bullets) {\n    bullet.update();\n  }\n}\n\nfunction render() {\n  gameManager.ctx.fillStyle = \"#000\";\n  gameManager.ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n  gameManager.player1?.render();\n\n  for (const bullet of gameManager.bullets) {\n    bullet.render();\n  }\n\n  for (const row of gameManager.blocks) {\n    for (const block of row) {\n      if (block) {\n        block.render();\n      }\n    }\n  }\n}\n\nfunction tick() {\n  switch (gameManager.mode) {\n    case GLOBAL_MODE.NORMAL_GAME: {\n      gameManager.ctx.fillStyle = \"pink\";\n      gameManager.ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      break;\n    }\n    case GLOBAL_MODE.DEBUG_TEST_LEVEL: {\n      update();\n      render();\n      break;\n    }\n    case GLOBAL_MODE.EDIT_TEST_LEVEL: {\n      levelEditor.render();\n      break;\n    }\n    default:\n  }\n\n  window.setTimeout(tick, 1000 / 60);\n}\n\n{\n  gameManager.player1 = new Tank(0, 0);\n  gameManager.blocks = new Array(52)\n    .fill(null)\n    .map(() => new Array(52).fill(null));\n  gameManager.bullets = [];\n}\n\npreloadAssets().then(tick);\n"]}